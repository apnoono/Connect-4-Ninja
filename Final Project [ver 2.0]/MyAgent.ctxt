#BlueJ class context
comment0.params=game\ iAmRed
comment0.target=MyAgent(Connect4Game,\ boolean)
comment0.text=\r\n\ Constructs\ a\ new\ agent,\ giving\ it\ the\ game\ and\ telling\ it\ whether\ it\ is\ Red\ or\ Yellow.\r\n\ \r\n\ @param\ game\ The\ game\ the\ agent\ will\ be\ playing.\r\n\ @param\ iAmRed\ True\ if\ the\ agent\ is\ Red,\ False\ if\ the\ agent\ is\ Yellow.\r\n
comment1.params=
comment1.target=void\ move()
comment1.text=\r\n\ The\ move\ method\ is\ run\ every\ time\ it\ is\ this\ agent's\ turn\ in\ the\ game.\ You\ may\ assume\ that\r\n\ when\ move()\ is\ called,\ the\ game\ has\ at\ least\ one\ open\ slot\ for\ a\ token,\ and\ the\ game\ has\ not\r\n\ already\ been\ won.\r\n\ \r\n\ By\ the\ end\ of\ the\ move\ method,\ the\ agent\ should\ have\ placed\ one\ token\ into\ the\ game\ at\ some\r\n\ point.\r\n\ \r\n\ After\ the\ move()\ method\ is\ called,\ the\ game\ engine\ will\ check\ to\ make\ sure\ the\ move\ was\r\n\ valid.\ A\ move\ might\ be\ invalid\ if\:\r\n\ -\ No\ token\ was\ place\ into\ the\ game.\r\n\ -\ More\ than\ one\ token\ was\ placed\ into\ the\ game.\r\n\ -\ A\ previous\ token\ was\ removed\ from\ the\ game.\r\n\ -\ The\ color\ of\ a\ previous\ token\ was\ changed.\r\n\ -\ There\ are\ empty\ spaces\ below\ where\ the\ token\ was\ placed.\r\n\ \r\n\ If\ an\ invalid\ move\ is\ made,\ the\ game\ engine\ will\ announce\ it\ and\ the\ game\ will\ be\ ended.\r\n\ \r\n
comment10.params=isRed
comment10.target=int\ greaterPosDiagCheck(boolean)
comment10.text=\r\n\ Returns\ the\ column\ index\ which\ can\ Connect4\ a\ subset\ of\ positive\ diagonals\ (scanning\ top\ to\ bottom,\ right\ to\ left)\r\n\ \r\n\ @return\ index,\ the\ index\ of\ a\ column,\ which\ can\ win\ one\ of\ four\ possible\ positive\ diagonals\r\n
comment11.params=isRed
comment11.target=int\ lesserPosDiagCheck(boolean)
comment11.text=\r\n\ Returns\ the\ column\ index\ which\ can\ Connect4\ a\ subset\ of\ positive\ diagonals\ (scanning\ top\ to\ bottom,\ right\ to\ left)\r\n\ \r\n\ @return\ index,\ the\ index\ of\ a\ column,\ which\ can\ win\ one\ of\ the\ remaining\ possible\ positive\ diagonals\r\n
comment12.params=x\ y
comment12.target=Connect4Slot\ getSlot(int,\ int)
comment12.text=\r\n\ Returns\ a\ Connect4Slot\ of\ row\ x\ column\ y\r\n\ \r\n\ @param\ x\ -\ the\ row\ index\r\n\ @param\ y\ -\ the\ column\ index\r\n\ @return\ a\ Connect4Slot\ object\r\n
comment13.params=column
comment13.target=int\ getLowestEmptyIndex(Connect4Column)
comment13.text=\r\n\ Returns\ the\ index\ of\ the\ top\ empty\ slot\ in\ a\ particular\ column.\r\n\ \r\n\ @param\ column\ The\ column\ to\ check.\r\n\ @return\ the\ index\ of\ the\ top\ empty\ slot\ in\ a\ particular\ column;\ -1\ if\ the\ column\ is\ already\ full.\r\n
comment14.params=columnNumber
comment14.target=void\ moveOnColumn(int)
comment14.text=\r\n\ Drops\ a\ token\ into\ a\ particular\ column\ so\ that\ it\ will\ fall\ to\ the\ bottom\ of\ the\ column.\r\n\ If\ the\ column\ is\ already\ full,\ nothing\ will\ change.\r\n\ \r\n\ @param\ columnNumber\ The\ column\ into\ which\ to\ drop\ the\ token.\r\n
comment15.params=
comment15.target=int\ randomMove()
comment15.text=\r\n\ Returns\ a\ random\ valid\ move.\ If\ your\ agent\ doesn't\ know\ what\ to\ do,\ making\ a\ random\ move\r\n\ can\ allow\ the\ game\ to\ go\ on\ anyway.\r\n\ \r\n\ @return\ a\ random\ valid\ move.\r\n
comment16.params=
comment16.target=int\ iCanWin()
comment16.text=\r\n\ Returns\ the\ column\ that\ would\ allow\ the\ agent\ to\ win.\r\n\ \r\n\ You\ might\ want\ your\ agent\ to\ check\ to\ see\ if\ it\ has\ a\ winning\ move\ available\ to\ it\ so\ that\r\n\ it\ can\ go\ ahead\ and\ make\ that\ move.\ Implement\ this\ method\ to\ return\ what\ column\ would\r\n\ allow\ the\ agent\ to\ win.\r\n\r\n\ @return\ the\ column\ that\ would\ allow\ the\ agent\ to\ win.\r\n
comment17.params=
comment17.target=java.lang.String\ getName()
comment17.text=\r\n\ Returns\ the\ name\ of\ this\ agent.\r\n\r\n\ @return\ the\ agent's\ name\r\n
comment2.params=isRed
comment2.target=int\ canWin(boolean)
comment2.text=\r\n\ Returns\ the\ column\ that\ would\ allow\ a\ winning\ move\r\n\ \r\n\ @return\ the\ index\ of\ the\ winning\ column\r\n
comment3.params=isRed
comment3.target=int\ vertCheck(boolean)
comment3.text=\r\n\ Returns\ index\ of\ a\ vertical\ Connect\ Four\r\n\ \r\n\ @return\ index,\ a\ column\ index\ value\ if\ player\ can\ land\ a\ winning\ move\ by\ vertical\ Connect\ Four;\ -1\ otherwise\r\n
comment4.params=isRed
comment4.target=int\ horizCheck(boolean)
comment4.text=\r\n\ Returns\ index\ of\ a\ horizontal\ Connect\ Four\r\n\ \r\n\ @return\ index,\ a\ column\ index\ value\ if\ player\ can\ land\ a\ winning\ move\ by\ horizontal\ Connect\ Four;\ -1\ otherwise\r\n
comment5.params=isRed
comment5.target=int\ diagCheck(boolean)
comment5.text=\r\n\ Returns\ index\ of\ the\ column\ which\ can\ Connect4\ diagonally\r\n\ \r\n\ @return\ index,\ a\ column\ index\ value\ if\ player\ can\ land\ a\ winning\ move\ by\ diagonal\ Connect\ Four;\ -1\ otherwise\r\n
comment6.params=isRed
comment6.target=int\ negativeDiagCheck(boolean)
comment6.text=\r\n\ Returns\ the\ column\ index\ which\ can\ Connect4\ a\ negative\ sloping\ diagonal\r\n\ \r\n\ @return\ index,\ an\ int\ representing\ the\ column\ index\ to\ play\r\n
comment7.params=isRed
comment7.target=int\ greaterNegDiagCheck(boolean)
comment7.text=\r\n\ Returns\ the\ column\ index\ which\ can\ Connect4\ a\ subset\ of\ negative\ diagonals\ (scanning\ top\ to\ bottom,\ left\ to\ right)\r\n\ \r\n\ @return\ index,\ the\ index\ of\ a\ column,\ which\ can\ win\ one\ of\ four\ possible\ negative\ diagonals\r\n
comment8.params=isRed
comment8.target=int\ lesserNegDiagCheck(boolean)
comment8.text=\r\n\ Returns\ the\ column\ index\ which\ can\ Connect4\ a\ subset\ of\ negative\ diagonals\ (scanning\ top\ to\ bottom,\ left\ to\ right)\r\n\ \r\n\ @return\ index,\ the\ index\ of\ a\ column,\ which\ can\ win\ one\ of\ the\ remaining\ negative\ diagonals\r\n
comment9.params=isRed
comment9.target=int\ positiveDiagCheck(boolean)
comment9.text=\r\n\ Returns\ the\ column\ index\ which\ can\ Connect4\ a\ positive\ sloping\ diagonal\r\n\ \r\n\ @return\ index,\ an\ int\ representing\ the\ column\ index\ to\ play\r\n
numComments=18
